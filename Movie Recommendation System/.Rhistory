library(ggplot2)
library(reshape2)
library(data.table)
install.packages(recommenderlab)
install.packages("recommenderlab")
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
setwd("/Users/espst/Documents/Data/movie_data")
getwd()
setwd("/Users/espst/Documents/Movie Reccommendation System/movie_data")
movie.data <- read.csv("movies.csv",stringsAsFactors = FALSE)
str(movie_data)
str(movie.data)
summary(movie.data)
head(movie.data)
summary(rating_data)
movie_data <- read.csv("movies.csv",stringsAsFactors=FALSE)
rating_data <- read.csv(ratings.csv)
rating_data <- read.csv("ratings.csv")
str(movie_data)
summary(movie_data)
head(movie_data)
summary(rating_data)
head(rating_data)
# Data Pre-processing
From the above table, we observe that the userId column, as well as the movieId column, consist of integers. Furthermore, we need to convert the genres present in the movie_data dataframe into a more usable format by the users. In order to do so, we will first create a one-hot encoding to create a matrix that comprises of corresponding genres for each of the films.
# Data Pre-processing
#From the above table, we observe that the #userId column, as well as the movieId column, #consist of integers. Furthermore, we need to #convert the genres present in the movie_data #dataframe into a more usable format by the #users. In order to do so, we will first #create a one-hot encoding to create a matrix #that comprises of corresponding genres for #each of the films.
summary(rating_data)
head(rating_data)
movie.genre <- as.data.frame(movie_data$genres,stringsAsFactors=FALSE)
library(data.table)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], '[|]', type.convert = TRUE))
movie_genre2 <- as.data.frame(tstrsplit(movie.genre[,1], '[|]', type.convert = TRUE))
movie_genre2 <- as.data.frame(tstrsplit(movie.genre[,1], '[|]', type.convert = TRUE),stringsAsFactors = FALSE)
colnames(movie_genre2) <- c(1:10)
list_genre
list_genre <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-Noir", "Horror", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western")
genre_mat1 <- matrix(0,10330,18)
genre_mat1[1,] <- list_genre
colnames(genre_mat1) <- list_genre
for (index in 1:nrow(movies_genre2)) {}
for (index in 1:nrow(movie_genre2))
for (col in 1:ncol(movie_genre2)) {
gen_col = which(genre_mat1[1,] == movie_genre2[index,col]) #Author DataFlair
genre_mat1[index+1,gen_col] <- 1
}
}
genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (col in 1:ncol(genre_mat2)) {
genre_mat2[,col] <- as.integer(genre_mat2[,col]) #convert from characters to integers
}
str(genre_mat2)
SearchMatrix <- cbind(movie_data[,1:2], genre_mat2[])
head(SearchMatrix)
summary(SearchMatrix)
head(SearchMatrix)
ratingMatrix <- as.matrix(ratingMatrix[,-1])
ratingMatrix <- as(ratingMatrix,"realRatingMatrix")
raingMatrix
raingMatrix
raingMatrix
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(data.table)
library(reshape2)
setwd("/home/dataflair/data/movie_data")
getwd
setwd("C:/Users/espst/Documents/Movie Recommendation")
read.csv("movies.csv",stringsAsFactors = FALSE)
movie_data <- read.csv("movies.csv",stringsAsFactors = FALSE)
rating_data <- read.csv("ratings.csv")
str(movie_data)
summary(movie_data)
head(movie_data)
summary(rating_data)
head(rating_data)
movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors=FALSE)
library(data.table)
str(genre_mat2)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE) #DataFlair
colnames(movie_genre2) <- c(1:10)
list_genre <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western")
genre_mat1 <- matrix(0,10330,18)
genre_mat1[1,] <- list_genre
colnames(genre_mat1) <- list_genre
for (index in 1:nrow(movie_genre2)) {
for (col in 1:ncol(movie_genre2)) {
gen_col = which(genre_mat1[1,] == movie_genre2[index,col]) #Author DataFlair
genre_mat1[index+1,gen_col] <- 1
}
}
genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (col in 1:ncol(genre_mat2)) {
genre_mat2[,col] <- as.integer(genre_mat2[,col]) #convert from characters to integers
}
str(genre_mat2)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
movie_data <- read.csv("movies.csv",stringsAsFactors = FALSE)
rating_data <- read.csv("ratings.csv")
str(movie_data)
summary(movie_data)
head(movie_data)
summary(rating_data)
head(rating_data)
movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors=FALSE)
library(data.table)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE) #DataFlair
colnames(movie_genre2) <- c(1:10)
list_genre <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western")
genre_mat1 <- matrix(0,10330,18)
genre_mat1[1,] <- list_genre
colnames(genre_mat1) <- list_genre
for (index in 1:nrow(movie_genre2)) {
for (col in 1:ncol(movie_genre2)) {
gen_col = which(genre_mat1[1,] == movie_genre2[index,col]) #Author DataFlair
genre_mat1[index+1,gen_col] <- 1
}
}
genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (col in 1:ncol(genre_mat2)) {
genre_mat2[,col] <- as.integer(genre_mat2[,col]) #convert from characters to integers
}
str(genre_mat2)
# Create a "search" matrix that will allow us to perform an easy search
# of the films by specifiyn the genre present in our list.
SearchMatrix <- cbind(movie_data[,1:2], genre_mat2[])
head(SearchMatrix)
# We have to convert our matrix into a sparse matrix one as a new class 'realRatingMatrix'.
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating", na.rm=FALSE)
# Removing userIds
ratingMatrix <- as.matrix(ratingMatrix[,-1])
# Convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix,"realRatingMatrix")
ratingMatrix
# Let us now overview some of the important parameters that provide us
# various options for building recommendation systems for movies
recommendation_model <- recommenderRegistry$get_entries(dataTpe = "realRatingMatrix")
names(recommendation_model)
lapply(recommendation_model, "[[", "description")
# Implementing one of the models - Collaborative filtering
recommendation_model$IBCF_realRatingMatrix$parameters
# Therefore, recommending movies is dependent on creating a relationship
# of similarity between the two users. With the help of recommenderlab,
# we can compute similarities using various operators like cosine,
# pearson as well as jaccard.
similarity_mat <- similarity(ratingMatrix[1:4, ],
method = "cosine",
which = "users")
as.matrix(similarity_mat)
par("mar")                  ### Fix fra stackoverflow
par(mar=c(1,1,1,1))
image(as.matrix(similarity_mat), main = "User's Similarities")
movie_similarity <- similarity(ratingMatrix[, 1:4], method =
"cosine", which = "items")
as.matrix(movie_similarity)
image(as.matrix(movie_similarity), main = "Movie similarity")
# Let us now extract the most unique ratings
rating_values <- as.vector(ratingMatrix@data)
unique(rating_values) #Extracting unique ratings
# Now we create a table of ratings that will display the most unique ratings
Table_of_Ratings <- table(rating_values)   # Creating a count of movie ratings
Table_of_Ratings
library(ggplot2)
# Count views for each movie
movie_views <- colCounts(ratingMatrix)
table_views <- data.frame(movie = names(movie_views),    ### Create df of views
views = movie_views)
table_views <- table_views[order(table_views$views,
decreasing = TRUE), ] # sort by number of views
table_views$title <- NA
for (index in 1:10325){
table_views[index,3] <- as.character(subset(movie_data,
movie_data$movieId == table_views[index,1])$title)
}
table_views[1:6,]
# Visualize a bar plot for the total number of views of the top films using ggplot2.
ggplot(table_views[1:6,], aes(x = title, y = views)) +
geom_bar(stat = "identity", fill = 'steelblue') +
geom_text(aes(label=views), vjust=-0.3, size=3.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Total Views of the Top Films")
image(ratingMatrix[1:20, 1:25], axes = FALSE, main = "Heatmap of the first 25 rows and 25 columns")
movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 50, colCounts(ratingMatrix) > 50]
movie_ratings
min_movies <- quantile(rowCounts(movie_ratings), 0.98)
min_users <- quantile(colCounts(movie_ratings), 0.98)
image(movie_ratings[rowCounts(movie_ratings) > min_movies,
colCounts(movie_ratings) > min_users],
main = "Heatmap of the top users and movies")
# Now we will visualize the distribution of the average ratings per user
average_rating <- rowMeans(movie_ratings)
qplot(average_rating, fill=I("steelblue"), col=I("red")) +
ggtitle("Distribution of average rating per user")
normalized_ratings <- normalize(movie_ratings)
sum(rowMeans(normalized_ratings) > 0.00001)
image(normalized_ratings[rowCounts(normalized_ratings) > min_movies,
colCounts(normalized_ratings) > min_users],
main = "Normalized Ratings of the Top users")
binary_min_movies <- quantile(rowCounts(movie_ratings), 0.95)
binary_min_users <- quantile(colCounts(movie_ratings), 0.95)
good_rated_films <- binarize(movie_ratings, minRating = 3)
image(good_rated_films[rowCounts(movie_ratings) > binary_min_movies,
colCounts(movie_ratings) > binary_min_users],
main = "Heatmap of top users and movies")
sampled_data <- sample(x = c(TRUE, FALSE), size = nrow(movie_ratings),
replace = TRUE, prob = c(0.8,0.2))
training_data <- movie_ratings[sampled_data, ]
testing_data <- movie_ratings[!sampled_data, ]
recommendation_system <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
recommendation_system$IBCF_realRatingMatrix
recommendation_system$IBCF_realRatingMatrix$parameters
recommen_model <- Recommender(data = training_data, method = "IBCF",
parameter = list(k = 30))
recommen_model <- Recommender(data = training_data, method = "IBCF",
parameter = list(k = 30))
recommen_model
class(recommen_model)
recommen_model <- Recommender(data = training_data,
method = "IBCF",
parameter = list(k = 30))
recommen_model
class(recommen_model)
model_info <- getModel(recommen_model)
class(model_info$sim)
dim(model_info$sim)
image(model_info$sim[1:top_items, 1:top_items],
main = "Heatmap of the first rows and columns")
top_items <- 20
image(model_info$sim[1:top_items, 1:top_items],
main = "Heatmap of the first rows and columns")
sum_rows <- rowSums(model_info$sim > 0)
table(sum_rows)
sum_cols <- colSums(model_info$sim > 0)
qplot(sum_cols, fill=I("steelblue"),
col=I("red")) + ggtitle("Distribution of the column count")
top_recommendations <- 10
predict.recommendations <- predict(object = recommen_model,
newdata = testing_data,
n = top_recommendations)
predicted_recommendations
predicted.recommendations <- predict(object = recommen_model,
newdata = testing_data,
n = top_recommendations)
predicted_recommendations
top_recommendations <- 10   # number of items to recommend to each user
predicted.recommendations <- predict(object = recommen_model,
newdata = testing_data,
n = top_recommendations)
predicted_recommendations
predicted_recommendations <- predict(object = recommen_model,
newdata = testing_data,
n = top_recommendations)
predicted_recommendations
user1 <- predicted_recommendations$items[[1]]
user1 <- predicted_recommendations@items[[1]] # recommendation for the first user
movies_user1 <- predicted_recommendations@itemLabels[user1]
movies_user2 <- movies_user1
for (index in 1:10){
movies_user2[index] <- as.character(subset(movie_data,
movie_data$movieId == movies_user1[index])$title)
}
movies_user2
recommendation_matrix <- sapply(predicted_recommendations@items,
function(x){ as.integer(colnames(movie_ratings)[x]) }) # matrix with the recommendations for each user
#dim(recc_matrix)
recommendation_matrix[,1:4]
recommendation_matrix <- sapply(predicted_recommendations@items,
function(x){ as.integer(colnames(movie_ratings)[x]) }) # matrix with the recommendations for each user
#dim(recc_matrix)
recommendation_matrix[,1:4]
dim(recc_matrix)
dim(recommendation_matrix)
recommendation_matrix[,1:4]
library(ranger)
source('~/RProjects/Detect Credit Card Fraud/CC Fraud.R')
library(caret)
library(data.table)
pip install ("ranger")
install.packages("ranger")
install.packages("caret")
library(ranger)
library(caret)
library(data.table)
creditcard_data <- read.csv("C:/Users/espst/Documents/RProjects/Detect Credit Card Fraud/creditcard.csv")
dim(creditcard_data)
head(creditcard_data)
tail(creditcard_data)
table(creditcard_data$Class)
summary(creditcard_data)
summary(creditcard_data$Amount)
names(creditcard_data)
var(creditcard_data)
var(creditcard_data$Amount)
sd(creditcard_data$Amount)
head(creditcard_data)
creditcard_data$Amount=scale(creditcard_data$Amount)
NewData=creditcard_data[,-c(1)]
head(NewData)
library(caTools)
set.seed(123)
data_sample = sample.split(NewData$Class.SplitRatio=0.80)
data_sample = sample.split(NewData$Class.SplitRatio = 0.80)
data_sample = sample.split(NewData$Class,SplitRatio = 0.80)
train_data = subset(NewData, data_sample==TRUE)
tes_data = subset(NewData, data_sample==FALSE)
dim(train_data)
dim(test_data)
test_data = subset(NewData, data_sample==FALSE)
dim(train_data)
dim(test_data)
Logistic_Model=glm(Class-.,test_data,family=binomial())
dim(train_data)
dim(test_data)
Logistic_Model=glm(Class~.,test_data,family = binomial())
summary(Logistic_Model)
# Visualizing it through the following plots
plot(Logistic_Model)
load("~/Movie Recommendation System/Movie Recommendation System.Rproj")
