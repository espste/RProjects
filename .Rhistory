int_vec <- c(1,2,3)
char_vec <- ("a","b","c")
char_vec <- ("a", "b", "c")
char_vec <- ("a", "b", "c")
char_vec <- c("a", "b", "c")
bool_vec <- c(TRUE, FALSE, TRUE)
data_frame <- data.frame(int_vec, char_vec, bool_vec)
employee_data <- data.frame(employee_id = c (1:5), employee_name = c("harry", "Espen", "Jim", "Oliver"),
sal = c(642.3,535.2,681.0,739.0,925.26),
join_date = as.Date(c("2013-02-04","2017-06-21","2012-11-14","2018-05-19","2016-03-25")),
stringsAsFactors = FALSE)
employee_data <- data.frame(employee_id = c (1:5), employee_name = c("harry", "Espen", "Jim", "Oliver", "Per"),
sal = c(642.3,535.2,681.0,739.0,925.26),
join_date = as.Date(c("2013-02-04","2017-06-21","2012-11-14","2018-05-19","2016-03-25")),
stringsAsFactors = FALSE)
print(emplyee_data)
print(employee_data)
str(employee_data)
output <- data.frame(employee_data$employee_name, employee_data$employee_id)
print(output)
# Extract first two rows
output <- employee_data[1:2,]
print(output)
#Extract 1st and 2nd row with the 3rd and 4th column of the below data.
result <- employee_data[c(1,2),c(3,4)]
result
# Expand R data frame
# Add the "dept" column
employee_data$dept <- c("IT","Finance","Operations","HR","Administration")
print(out)
out <- employee_data
print(out)
# Create the second R data frame
#Add Row
# Create the second R data frame
employee_new_data <- data.frame(employee_id = c (6:8),
employee_name = c("Aman", "Pul", "Gaby"),
sal = c(523.0,721.3,622.8),
join_date = as.Date(c("2015-06-22","2016-04-09","2011-03-17")),
stringsAsFactors = FALSE
)
# Bind the two data frames
employee_out_data <- rbind(employee_data,employee_new_data)
# Bind the two data frames
employee_out_data <- rbind(employee_data, employee_new_data)
employee_out_data
#Add Row
# Create the second R data frame
employee_new_data <- data.frame(employee_id = c (6:8),
employee_name = c("Aman", "Pul", "Gaby", "Ole", "PÃ¥l"),
sal = c(523.0,721.3,622.8, 400.2, 989.0),
join_date = as.Date(c("2015-06-22","2016-04-09","2011-03-17","20201-13-37","2022-13-37")),
stringsAsFactors = FALSE
)
#Add Row
# Create the second R data frame
employee_new_data <- data.frame(employee_id = c (6:8),
employee_name = c("Aman", "Pul", "Gaby"),
sal = c(523.0,721.3,622.8),
join_date = as.Date(c("2015-06-22","2016-04-09","2011-03-17")),
stringsAsFactors = FALSE
)
> employee_out_data       #DataFlair
# Bind the two data frames
employee_out_data <- rbind(employee_data,employee_new_data)
# Bind the two data frames
employee_out_data <- merge(employee_data,employee_new_data)
employee_out_data       #DataFlair
#Add Row
# Create the second R data frame
employee_new_data <- data.frame(employee_id = c (6:8),
employee_name = c("Aman", "Pul", "Gaby"),
sal = c(523.0,721.3,622.8),
join_date = as.Date(c("2015-06-22","2016-04-09","2011-03-17")),
stringsAsFactors = FALSE
)
# Bind the two data frames
#employee_out_data <- merge(employee_data,employee_new_data)
#employee_out_data       #DataFlair
bind_rows(employee_data,employee_new_data)
#Add Row
# Create the second R data frame
employee_new_data <- data.frame(employee_id = c (6:8),
employee_name = c("Aman", "Pul", "Gaby"),
sal = c(523.0,721.3,622.8),
join_date = as.Date(c("2015-06-22","2016-04-09","2011-03-17")),
stringsAsFactors = FALSE
)
library("dplyr")
bind_rows(employee_data, employee_new_data)
# Expand R data frame
# Add the "dept" column
employee_data$dept <- c("IT","Finance","Operations","HR","Administration","Cleaning", "BJ Dept","Massage")
out <- employee_data
print(out)
#Add Row
# Create the second R data frame
employee_new_data <- data.frame(employee_id = c (6:8),
employee_name = c("Aman", "Pul", "Gaby"),
sal = c(523.0,721.3,622.8),
join_date = as.Date(c("2015-06-22","2016-04-09","2011-03-17")),
stringsAsFactors = FALSE
)
# Bind the two data frames
bind_rows(employee_data, employee_new_data)
# Bind the two data frames
bind_rows(employee_data, employee_new_data)
directions <- c("North","North","West","South")
# Let us convert this vector into a factor
factor(directions)
# In order to add the missing level to our factors we use "levels" attribute
factor(directions, levels = c("North", "East", "South", "West"))
# In order to add abbreviatons or 'labels'
factor(directions, levels = c("North","East","South","West"),
labels = c("N","E","S","W"))
factor(directions, levels = c("North","East","South","West"), exclude = "North")
BigData <- gl(3, 2, labels = c("Hadoop", "Spark", "Flink"))
print(BigData)
compass <- c("East", "West", "East", "North")
data <- factor(compass)
data
data[4] # Accessing the 4th element
data[c(2,3)]  # Accessing the 2nd & 3rd element
data[-1]  # Accessing everything except 1st element
data[c(TRUE, FALSE, TRUE, TRUE)]  # Accessing using Logical Vector
print(data)
data[2] <- "North" #Modifying 2nd element
data[2] <- "North"
data[3] <- "South"
print(data)
levels(data) <- c(levels(data), "South")
data[3] <- "South"
print(data)
f_directions <- factor(directions)
is.factor(f_directions)
as.factor(directions)
is.ordered(f_directions)
as.ordered(f_directions)
mat1 <- matrix(1:4, nrow = 2, ncol = 2)
mat1
mat2 <- matrix(4:7, nrow = 2, ncol = 2)
mat2
mat1[1,2]
mar2[2,1]
mat2[2,1]
mat1[2, ]
mat1[, 2]
mat1 + mat2
mat1 - mat2
# 3. Multiplying by a constant
4 * mat1
# 4. Dividing
(mat1/mat2)
# 5. Transposing
t(mat1)
# 6.  Identity matrix
# We can find the nxn identity matrix using the diag(n) function.
diag(4)
vec1 <- c(1,2,4)
vec2 <- c(15,17,27,3,10,11)
output <- array(c(vec1,vec2), dim = c(3,3,2))
output
vec1
column_names <- c("col1","col2","col3")
row_names <- c("row1","row2","row3")
matrix_names <- c("Mat1", "Mat2")
# Take these vectors as input to the array
output <- array(c(vec1,vec2), dim = c(3,3,2), dimnames = list(row_names, column_names,
matrix_names))
output
# 2. Accessing Array Elements
# We will create two vectors of different lengths.
output<b></b>
output
# 2. Accessing Array Elements
# We will create two vectors of different lengths.
output[3,,2]
output[1,3,1]
output[,,2]
vec1 <- c(1,2,3)
vec2 <- c(4,5,6,7,8,9)
arr1 <- array(c(vec1,vec2), dim = c(3,3,2))
arr1
vec2
vec3 <- c(3,2,1)
vec4 <- c(9,8,7,6,5,4)
arr2 <- array(c(vec3,vec4), dim = c(3,3,2))
mat1 <- arr1[,,2]
mat2 <- arr2[,,2]
output <- mat1 + mat2
output
vec2 <- c(4,5,6,7,8,9)
vec1 <- c(1,2,3)
vec2 <- c(4,5,6,7,8,9)
array_new <- array(c(vec1,vec2), dim = c(3,3,2))
array_new
output <- apply(array_new, c(1), sum)
output
# The variable x is containing copies of three vectors n,s,b and a numeric value 3.
num_list = c(3,4,5)
char_list = c("a", "b", "c", "d", "e")
logic_list = c(TRUE, TRUE, FALSE, TRUE)
out_list = list(num_list, char_list, logic_list, 3)
out_list
# The following variable df is a data frame containing three variables n, s, b.
num_list = c(3,4,5)
# The variable x is containing copies of three vectors n,s,b and a numeric value 3.
num_list = c(3,4,5)
char_list = c("a", "b", "c", "d", "e")
logic_list = c(TRUE, TRUE, FALSE, TRUE)
out_list = list(num_list, char_list, logic_list, 3)
out_list
data.frame = data.frame(num_list,char_list,logic_list)
num_list = c(3,4,5)
char_list = c("a", "b", "c")logic_list = c(TRUE, FALSE, TRUE)
char_list = c("a", "b", "c")
logic_list = c(TRUE, FALSE, TRUE)
data_frame = data.frame(num_list, char_list, logic_list)
data_frame
statement
if(test_expression) {
statement
}
values <- 1:10
if (sample(values,1) <=10)
print(paste(values, "is less than or equal to 10"))
num <- 1
class(num)
typeof(num)
int <- as.integer(16)
class(int)
typeof(int)
class(int)
typeof(int)
int2 <- as.integer(num)
int2
class(int2)
typeof(int)
int3 <- 5L
class(5L)
typeof(int3)
class(int3)
comp <- 22-6i
class(comp)
typeof(comp)
class(logi)
logi <- FALSE
class(logi)
typeof(logi)
char <- "dataflairtutorial1234"
class(char)
typeof(char)
char2 <- as.character("hello")
char3 <- as.character(comp)
char2
char3
class(char2)
class(char3)
typeof(char2)
typeof(char3)
num2 <- as.numeric(int)
num2
num3 <- as.numeric(comp)
num3
num4 <- as.numeric(logi)
num4
num5 <- as.numeric(char)
num5
num5 <- as.numeric("1234")
num5
int4 <- as.integer(num)
int4
int5 <- as.integer(14.7)
int5int6 <- as.integer(comp)
int5
int4
int5 <- as.integer(14.7)
int5
int6 <- as.integer(comp)
int6
int7 <- as.integer(logi)
int7
int8 <- as.integer("1234")
int8
comp2 <- as.complex(num)
comp2
comp3 <- as.complex(int)
comp3
comp4 <- as.complex(logi)
comp4
comp5 <- as.complex("1234")
comp5
logi2 <- as.logical(num)
logi2
logi3 <- as.logical(int)
logi3
logi4 <- as.logical(comp)
logi4
logi5 <- as.logical(char)
logi5
char2 <- as.character(num)
char2
char3 <- as.character(int)
char3
char4 <- as.character(comp)
char4
char5 <- as.character(logi)
char5
values <- 1:10
if (sample(values,1) <= 10)
print(paste(values, "is less than or equal to 10"))
val1 = 10
val1
val2 = 5
if(val1 < val2){
print("Value 1 is greater than Value 2")
} else if (val1 > val2) {
print("Value 1 is less than Value 2")
}
values <- c(1,2,3,4,5)
print(values[id])
values <- c(1,2,3,4,5)
for (id in 1:5) {
print(values[id])
}
mat <- matrix(1:10, 2)
print(mat[id1, id2])
for (id1 in seq(nrow(mat))) {
for (id2 in seq(ncol(mat)))
print(mat[id1, id2])
}
val = 2.987
while(val <= 4.987){
val = val + 0.987
print(c(val,val-2,val-1))
}
val <- 5
repeat {
print(val)
val <- val+1
if (val == 10) {
break
}
}
#Example:
values 1:10
#Example:
values = 1:10
#Example:
values = 1:10
for (id in values) {
if (id == 2) {
break
}
print(id)
}
for (id in values) {
if (id == 8) {
break
}
print(id)
}
# 7.  next Statement
# next jumps to the next cycle without completing a particular iteration.
# In fact, it jumps to the evaluation of the condition holding the current
# loop. Next statement enables to skip the current iteration of a loop without
# terminating it.
x = 1: 4
# 7.  next Statement
# next jumps to the next cycle without completing a particular iteration.
# In fact, it jumps to the evaluation of the condition holding the current
# loop. Next statement enables to skip the current iteration of a loop without
# terminating it.
x = 1: 4
x = 1: 4
for (i in x) {
if (i == 2) {
next
}
print(i)
}
check <- function(x)  {
if (x > 0) {
result <- "Positive"
} else if (x < 0) {
result <- "Negative"
} else {
result <- "Zero"
}
return(result)
}
check(1)
check(-10)
check(0)
precentage <- round(frac * 100, digits = 1)
frac <- c(0.452, 1.5642, 0.84520)
precentage <- round(frac * 100, digits = 1)
out <- paste(percentage, "%", sep = "")
percentage <- round(frac * 100, digits = 1)
out <- paste(percentage, "%", sep = "")
print(out)
source('Functions.R')
frac <- c(0.452, 1.5642, 0.84520)
percentage <- round(frac * 100, digits = 1)
out <- paste(percentage, "%", sep = "")
print(out)
source('pastPercentage.R')
source('pastPercentage.R')
Percent_add <- function(frac) {
percent <- round(frac * 100, digits = 1)
out <- paste(percent, "%", sep = "%")
return(out)
}
# Using R function
Percent_add(20)
# Using R function
Percent_add(2)
# Using R function
Percent_add(-2)
# Using R function
Percent_add(0)
recommendation_system <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
recommendation_system <- recommenderRegistry$get_entries(dataType="ratingMatrix")
recommendation_system <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
recommendation_system <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
image(normalized_ratings[rowCounts(normalized_ratings) > min_movies,
colCounts(normalized_ratings) > min_users],
main = "Normalized Ratings of the Top users")
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
movie_data <- read.csv("movies.csv",stringsAsFactors = FALSE)
rating_data <- read.csv("ratings.csv")
